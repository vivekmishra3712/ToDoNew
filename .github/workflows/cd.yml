
name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
  workflow_dispatch:

env:
  CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: gke-cluster   # cluster name
  GKE_REGION: us-east1
  GKE_LOCATION: us-east1-b     # cluster location
  SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  TFSTATE_CACHE_KEY: terraform-state-${{ github.sha }}

jobs:
  create-cluster:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }} 

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Cache Terraform State
        uses: actions/cache@v3
        with:
          path: |
            .terraform/
            terraform.tfstate
            terraform.tfstate.backup
          key: ${{ env.TFSTATE_CACHE_KEY }}

  deploy-to-cluster:
    runs-on: ubuntu-latest
    needs: create-cluster
    outputs:
      baseurl: ${{ steps.extract-url.outputs.baseurl }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Google Cloud SDK
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ env.CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure kubectl to use gke-gcloud-auth-plugin
        run: gcloud components install kubectl

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_LOCATION }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy application to GKE
        run: kubectl apply -f deployment.yaml

      - name: Wait for the service to be ready
        run: |
          echo "Waiting for 60 seconds..."
          sleep 60

      - name: Extract baseurl from GKE service
        id: extract-url
        run: |
          EXTERNAL_IP=$(kubectl get svc svctodoh2api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          PORT=$(kubectl get svc svctodoh2api -o jsonpath='{.spec.ports[0].port}')
          echo "EXTERNAL_IP is: $EXTERNAL_IP"
          echo "PORT is: $PORT"
          echo "baseurl=http://$EXTERNAL_IP:$PORT" >> $GITHUB_OUTPUT

  run-postman-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-cluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Collection
        env:
          BASEURL: ${{ needs.deploy-to-cluster.outputs.baseurl }}
        run: |
          newman run postman_collection.json --env-var "base_url=${{ env.BASEURL }}"
          
  destroy-cluster:
    runs-on: ubuntu-latest
    needs: [deploy-to-cluster, run-postman-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Terraform State Cache
        uses: actions/cache@v3
        with:
          path: |
            .terraform/
            terraform.tfstate
            terraform.tfstate.backup
          key: ${{ env.TFSTATE_CACHE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}
